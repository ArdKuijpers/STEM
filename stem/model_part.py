from typing import Optional, Union, Dict, Any

from stem.load import LoadParametersABC
from stem.boundary import BoundaryParametersABC
from stem.additional_processes import AdditionalProcessesParametersABC
from stem.soil_material import SoilMaterial
from stem.structural_material import StructuralMaterial

from stem.geometry import Geometry


class ModelPart:
    """
    One part of the complete model, this can be a boundary condition, a loading or another special process
    like excavation.

    Attributes:
        - name (Optional[str]): name of the model part
        - nodes (None): node id followed by node coordinates in an array
        - elements (None): element id followed by connectivities in an array
        - conditions (None): condition id followed by connectivities in an array
        - geometry (Optional[:class:`stem.geometry.Geometry`]): geometry of the model part
        - parameters (Optional[Union[:class:`stem.load.LoadParametersABC`, \
            :class:`stem.boundary.BoundaryParametersABC, \
            :class:`stem.additional_processes.AdditionalProcessesParametersABC`]]): process parameters containing the
            model part parameters.
    """
    def __init__(self):
        self.name: Optional[str] = None
        self.nodes = None # todo define type
        self.elements = None # todo define type
        self.conditions = None # todo define type

        self.geometry: Optional[Geometry] = None
        self.parameters: Optional[
            Union[LoadParametersABC, BoundaryParametersABC,AdditionalProcessesParametersABC]
        ] = None

    def get_geometry_from_geo_data(self, geo_data: Dict[str, Any], name: str):
        """
        Get the geometry from the geo_data and set the nodes and elements attributes.

        Args:
            - geo_data (Dict[str, Any]): dictionary containing the geometry data as generated by the gmsh_io

        """

        self.geometry = Geometry.create_geometry_from_gmsh_group(geo_data, name)


class BodyModelPart(ModelPart):
    """
    This class contains model parts which are part of the body, e.g. a soil layer or track components.

    Inheritance:
        - :class:`ModelPart`

    Attributes:
        - name (str): name of the model part
        - nodes (None): node id followed by node coordinates in an array
        - elements (None): element id followed by connectivities in an array
        - conditions (None): condition id followed by connectivities in an array
        - parameters (Dict[str, Any]): dictionary containing the model part parameters
        - material (Union[:class:`stem.soil_material.SoilMaterial`, \
            :class:`stem.structural_material.StructuralMaterial`]): material of the model part
    """

    def __init__(self):
        super().__init__()

        self.material: Optional[Union[SoilMaterial, StructuralMaterial]] = None
