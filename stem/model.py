from typing import List, Sequence, Dict, Any

from stem.model_part import ModelPart, BodyModelPart
from stem.soil_material import *
from stem.structural_material import *

from gmsh_utils import gmsh_IO

class Model:
    """
    A class to represent the main model.

    Attributes:
        - project_parameters (dict): A dictionary containing the project parameters.
        - solver (Solver): The solver used to solve the problem.
        - body_model_parts (list): A list containing the body model parts.
        - process_model_parts (list): A list containing the process model parts.

    """
    def __init__(self):
        self.ndim = None
        self.project_parameters = None
        self.solver = None
        self.geometry = None
        self.mesh = None
        self.gmsh_io = gmsh_IO.GmshIO()
        self.body_model_parts: List[BodyModelPart] = []
        self.process_model_parts: List[ModelPart] = []

        self.extrusion_length: Optional[Sequence[float]] = None

    def get_geometry_from_geo_data(self, geo_data: Dict[str, Any]):
        """
        Get the geometry from the geo_data and set the nodes and elements attributes.

        Args:
            - geo_data (Dict[str, Any]): dictionary containing the geometry data as generated by the gmsh_io

        """

        print("Getting geometry from geo data is not implemented yet")

    def add_soil_layer(self, coordinates: Sequence[Sequence[float]],
                       material_parameters: Union[SoilMaterial, StructuralMaterial], name: str,
                       ):
        """
        Adds a soil layer to the model.

        Args:
            - coordinates (Sequence[Sequence[float]]): The coordinates of the soil layer.
            - material_parameters (Union[:class:`stem.soil_material.SoilMaterial`, \
                :class:`stem.structural_material.StructuralMaterial`]): The material parameters of the soil layer.
            - name (str): The name of the soil layer.

        """

        # check if extrusion length is specified in 3D
        if self.ndim == 3:
            if self.extrusion_length is None:
                raise ValueError("Extrusion length must be specified for 3D models")
            else:
                extrusion_length = self.extrusion_length
        else:
            # in 2D extrusion length is not needed
            extrusion_length = [0, 0, 0]

        #todo check if this function in gmsh io can be improved
        self.gmsh_io.generate_geometry([coordinates], extrusion_length, self.ndim, "", [name])

        # create body model part
        body_model_part = BodyModelPart()
        body_model_part.name = name
        body_model_part.material = material_parameters

        # set the geometry of the body model part
        body_model_part.get_geometry_from_geo_data(self.gmsh_io.geo_data, name)

        self.body_model_parts.append(body_model_part)

    def synchronise_geometry(self):
        """
        Synchronise the geometry of the model with the geometry of the model parts.

        """

        # synchronize gmsh and extract geo data
        self.gmsh_io.synchronize_gmsh()
        self.gmsh_io.extract_geo_data()

        # collect all model parts
        all_model_parts: List[Union[BodyModelPart, ModelPart]] = []
        all_model_parts.extend(self.body_model_parts)
        all_model_parts.extend(self.process_model_parts)

        # Get the geometry from the geo_data for each model part
        for model_part in all_model_parts:
            model_part.get_geometry_from_geo_data(self.gmsh_io.geo_data, model_part.name)

        # get the complete geometry
        self.get_geometry_from_geo_data(self.gmsh_io.geo_data)

if __name__ == '__main__':
    coordinates = [[0, 0,0], [1, 0,0], [1, 1,0], [0, 1, 0]]

    soil_formulation = OnePhaseSoil(2,IS_DRAINED=True,DENSITY_SOLID=2650, POROSITY=0.3)
    constitutive_law = LinearElasticSoil(YOUNG_MODULUS=100e6, POISSON_RATIO=0.3)

    soil_material = SoilMaterial(name="soil", soil_formulation=soil_formulation, constitutive_law=constitutive_law,
                                 retention_parameters=SaturatedBelowPhreaticLevelLaw())

    model = Model()
    model.ndim = 2
    model.add_soil_layer(coordinates, soil_material, "soil")

    a=1+1





